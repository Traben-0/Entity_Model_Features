plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.10-SNAPSHOT" apply false
    id "systems.manifold.manifold-gradle-plugin" version "0.0.2-alpha"
}

private void setupPreProcess(def index){
    println "Setting up preprocessor for version index $index"
    new File(projectDir,"build.properties").text = """
    MC_18   = 0
    MC_19_2 = 1
    MC_19_4 = 2
    MC_20_1 = 3
    MC_20_2 = 4
    MC_20_4 = 5
    MC_20_6 = 6
    MC_21   = 7
    MC_21_1 = 7
    MC_21_2 = 8
    MC_21_4 = 9
    MC_21_5 = 10
    MC      = ${index}
    """

    File indexProps = new File(projectDir,"property_variants/${index}.properties")
    println "Applying gradle.properties overrides: $indexProps.path"
    Properties properties = new Properties()
    properties.load(indexProps.newDataInputStream())

    def maxKeyLength = properties.keySet().collect { it.toString().length() }.max()
    properties.forEach { key, value ->
        //set in each project scope
        gradle.rootProject.setProperty(key as String, value)
        project.setProperty(key as String, value)
        subprojects.forEach { it.setProperty(key as String, value)}

        println " - ${key.padRight(maxKeyLength)} = $value"
    }

}
setupPreProcess(rootProject.mc_build)

architectury {
    minecraft = rootProject.minecraft_version
}



subprojects {
    apply plugin: "dev.architectury.loom"
    apply plugin: "systems.manifold.manifold-gradle-plugin"

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"

        if(rootProject.parchment_version != "no") {
            println "Using Parchment mappings ${rootProject.parchment_version}"
            mappings loom.layered() {
                officialMojangMappings()
                parchment("org.parchmentmc.data:parchment-${rootProject.parchment_version}@zip")
            }
        }else{
            println "Not using Parchment mappings"
            mappings loom.officialMojangMappings()
        }

        implementation 'com.demonwav.mcdev:annotations:2.1.0'

        annotationProcessor 'systems.manifold:manifold-preprocessor:2025.1.16'
    }

    processResources {
        inputs.property "version", rootProject.mod_version
        inputs.property "compatible_mc_fabric", rootProject.compatible_mc_fabric
        inputs.property "compatible_mc_forge", rootProject.compatible_mc_forge

        filesMatching("fabric.mod.json") {
            expand(["version": rootProject.mod_version,
                    "compatible_mc_fabric": rootProject.compatible_mc_fabric])
        }
        filesMatching("META-INF/mods.toml") {
            expand(["version": rootProject.mod_version,
                    "compatible_mc_forge": rootProject.compatible_mc_forge])
        }
        filesMatching("META-INF/neoforge.mods.toml") {
            expand(["version": rootProject.mod_version,
                    "compatible_mc_forge": rootProject.compatible_mc_forge])
        }

    }
}



allprojects {


    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"
    apply plugin: "systems.manifold.manifold-gradle-plugin"

    archivesBaseName = rootProject.archives_base_name
    version = rootProject.mod_version
    group = rootProject.maven_group

    repositories {
        maven { url "https://maven.shedaniel.me/" }
        maven { url "https://maven.terraformersmc.com/releases/" }
        maven { url = "https://maven.isxander.dev/releases" }
        maven {url = "https://api.modrinth.com/maven"}
        maven { url "https://mvnrepository.com/artifact/com.demonwav.mcdev/annotations" }
        maven { url "https://maven.parchmentmc.org" }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release = rootProject.java_version as int
        options.compilerArgs += ["-Xplugin:Manifold"]
    }

    java {
        withSourcesJar()
    }
}
